#!/usr/bin/env ruby

$:.unshift File.expand_path(File.dirname(__FILE__) + '/../lib/')
require 'rtsp/client'
require 'tempfile'

# Allows for running an RTSP client
rtsp_client = RTSP::Client.new "rtsp://64.202.98.91:554/gs.sdp"
response = rtsp_client.options
puts "code:           #{response.code}"
puts "message:        #{response.message}"
puts "server:         #{response.server}"
puts "cseq:           #{response.cseq}"
puts "public:         #{response.public}"

response = rtsp_client.describe
puts "code:           #{response.code}"
puts "message:        #{response.message}"
puts "server:         #{response.server}"
puts "cseq:           #{response.cseq}"
puts "cache_control:  #{response.cache_control}"
puts "content_length: #{response.content_length}"
puts "date:           #{response.date}"
puts "expires:        #{response.expires}"
puts "content_type:   #{response.content_type}"
puts "content_base:   #{response.content_base}"

# content_base is the base URI for any track to work with
track = URI.parse response.content_base
puts rtsp_client.aggregate_control_track
puts rtsp_client.media_control_tracks

# Add the first media_control_track to the URI
puts track.path += rtsp_client.media_control_tracks.first 
puts track.to_s

# Replace the client's list of tracks with the available track
rtsp_client.stream_tracks[0] = track.to_s
response = rtsp_client.setup(:destination => 'unicast')
puts "code:           #{response.code}"
puts "message:        #{response.message}" 
puts "server:         #{response.server}"
puts "cseq:           #{response.cseq}"
puts "session:        #{response.session}"
puts "transport:      #{response.transport}"
session = response.session
transport_info = response.transport

if response.message == "OK"
  r = rtsp_client.play(:session => session)
  puts "code:           #{r.code}"
  puts "message:        #{r.message}"
  puts "server:         #{r.server}"
  puts "cseq:           #{r.cseq}"
  puts "session:        #{r.session}"
  puts "range:          #{r.range}"
  puts "rtp_info:       #{r.rtp_info}"
  cseq = r.cseq
  sleep 5
  #rtsp_client.pause({ :session => session, :sequence => cseq })
  r2 = rtsp_client.teardown
  puts "code:           #{r2.code}"
  puts "message:        #{r2.message}"
  puts "server:         #{r2.server}"
  puts "cseq:           #{r2.cseq}"
  puts "connection:     #{r2.connection}"
end
exit

#rtsp_client = RTSP::Client.new "192.168.10.219"
#rtsp_client.setup :port => 8554

socket = UDPSocket.new
socket.bind "0.0.0.0", 8554
streamed_file = Tempfile.new "spectra_hd_streamed_file"

begin
  Timeout::timeout(5) do
    while data = socket.recvfrom(102400).first
      puts "data size = #{data.size}"
      streamed_file.write data
    end
  end
rescue Timeout::Error
  # blah
end

socket.close
rtsp_client.teardown

require 'fileutils'
FileUtils.cp(streamed_file, "/Users/sloveless/Desktop/")
streamed_file.close